package br.com.company.fks.destinacao.service;

import br.gov.mpog.acessos.cliente.dto.UsuarioLogadoDTO;
import br.com.company.fks.destinacao.builder.Resposta;
import br.com.company.fks.destinacao.dominio.dto.*;

import br.com.company.fks.destinacao.dominio.entidades.Arquivo;
import br.com.company.fks.destinacao.dominio.entidades.Benfeitoria;
import br.com.company.fks.destinacao.dominio.entidades.BenfeitoriaDestinada;
import br.com.company.fks.destinacao.dominio.entidades.DestinacaoImovel;
import br.com.company.fks.destinacao.dominio.entidades.Endereco;
import br.com.company.fks.destinacao.dominio.entidades.Imovel;
import br.com.company.fks.destinacao.dominio.entidades.Parcela;
import br.com.company.fks.destinacao.dominio.entidades.Destinacao;
import br.com.company.fks.destinacao.dominio.entidades.UnidadeAutonoma;
import br.com.company.fks.destinacao.dominio.enums.TipoDestinacaoEnum;
import br.com.company.fks.destinacao.exceptions.IntegracaoException;
import br.com.company.fks.destinacao.exceptions.NegocioException;
import br.com.company.fks.destinacao.repository.ImovelRepository;
import br.com.company.fks.destinacao.service.destinacao.PosseInformalService;
import br.com.company.fks.destinacao.service.validadores.ValidadorDestinacao;
import br.com.company.fks.destinacao.service.validadores.ValidadorRip;
import br.com.company.fks.destinacao.service.validadores.ValidadorRipStrategyFactory;
import br.com.company.fks.destinacao.service.validadores.impl.ValidadorRipGenerico;
import br.com.company.fks.destinacao.utils.EntityConverter;
import br.com.company.fks.destinacao.utils.MensagemNegocio;
import br.com.company.fks.destinacao.utils.RequestUtils;
import br.com.company.fks.destinacao.utils.URLIntegracaoUtils;
import lombok.SneakyThrows;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Matchers;
import org.mockito.Mock;
import org.modelmapper.TypeToken;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import scala.Int;

import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;

import static java.util.Arrays.asList;

import static java.util.Arrays.copyOfRange;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import static org.junit.Assert.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.when;
import static org.powermock.api.mockito.PowerMockito.doNothing;

/**
 * Created by Basis Tecnologia on 21/11/2016.
 */

@RunWith(PowerMockRunner.class)
public class ImovelServiceTest {

    private static final String RIP = "00000001";
    private static final String TIPO_DESTINACAO_DOACAO = "DOACAO";
    private static final String TIPO_DESTINACAO_POSSE_INFORMAL = "POSSE_INFORMAL";
    private static final Long ID_IMOVEL = 1L;
    private static final String BASE64_IMAGENS_IMOVEL = "";
    private static final String TIPO_DESTINACAO_CESSAO_GRATUITA = "CESSAO_GRATUITA";
    private static final String TIPO_DESTINACAO_TRANSFERENCIA = "TRANSFERENCIA";

    @InjectMocks
    private ImovelService imovelService;

    @Mock
    private ImovelRepository imovelRepository;

    @Mock
    private URLIntegracaoUtils urlIntegracaoUtils;

    @Mock
    private Imovel imovel;

    @Mock
    private ResponseEntity responseEntity;

    @Mock
    private ImovelDTO imovelDTO;

    @Mock
    private Resposta<ImovelDTO> resposta;

    @Mock
    private OcupanteService ocupanteService;

    @Mock
    private Endereco endereco;

    @Mock
    private EnderecoService enderecoService;

    @Mock
    private EntityConverter entityConverter;

    @Mock
    private PosseInformalService posseInformalService;

    @Mock
    private DestinacaoDTO destinacaoDTO;

    @Mock
    private ImagemDTO imagemDTO;

    @Mock
    private DestinacaoImovelDTO destinacaoImovelDTO;

    @Mock
    private UsuarioService usuarioService;

    @Mock
    private UsuarioLogadoDTO usuarioLogadoDTO;

    @Mock
    private BenfeitoriaDestinadaService benfeitoriaDestinadaService;

    @Mock
    private BenfeitoriaDestinada benfeitoriaDestinada;

    @Mock
    private ArquivoService arquivoService;

    @Mock
    private Arquivo arquivo;

    @Mock
    private MensagemNegocio mensagemNegocio;

    @Mock
    private BenfeitoriaDTO primeiraBenfeitoriaDTO;

    @Mock
    private BenfeitoriaDTO segundaBenfeitoriaDTO;

    @Mock
    private BenfeitoriaService benfeitoriaService;

    @Mock
    private Benfeitoria benfeitoria;

    @Mock
    private UnidadeAutonoma unidadeAutonoma;

    @Mock
    private RequestUtils requestUtils;

    @Mock
    private ParcelaService parcelaService;

    @Mock
    private Parcela parcela;

    @Mock
    private DestinacaoImovel destinacaoImovel;

    @Mock
    private ValidadorRipStrategyFactory validadorRipStrategyFactory;

    @Mock
    private ValidadorRip validadorRip;

    @Mock
    private DestinacaoImovelService destinacaoImovelService;

    @Mock
    private DestinacaoPendenciaService destinacaoPendenciaService;

    @Mock
    private UtilizacaoDTO utilizacaoDTO;

    @Mock
    private ConsultaImovelDTO consultaImovelDTO;

    @Mock
    private Pageable pageable;

    @Mock
    private ResponseEntity responseEntityListaArquivos;

    @Mock
    private SuspensaoImovelDTO suspensaoImovelDTO;

    @Mock
    private SituacaoImovelDTO situacaoImovelDTO;

    @Mock
    private Page<ImovelDTO> pageImovelDto ;

    @Mock
    private List<Benfeitoria> listaBenfeitorias;

    @Mock
    private Optional<Parcela> optional;

    @Mock
    private Optional<String> stringOptional;

    @Mock
    private Map<Long, Boolean> pendenciasGeradas;

    @Mock
    private Page<ImovelDTO> imovelDTOList;

    Type targetType = new TypeToken<ImovelDTO>() {}.getType();

    @Before
    public void setUp() {
        when(imovelRepository.buscarPorRip(anyString())).thenReturn(asList(imovel));
        when(imovelRepository.save(any(Imovel.class))).thenReturn(imovel);
        when(responseEntity.getBody()).thenReturn(resposta);
        when(resposta.getResultado()).thenReturn(imovelDTO);
        when(resposta.getResultado().getDestinacoes()).thenReturn(asList(destinacaoDTO));
        when(urlIntegracaoUtils.getUrlImovelCadastroImoveis(anyString())).thenReturn("www.google.com.br");
        when(requestUtils.doGet(anyString(), eq(Resposta.class))).thenReturn(responseEntity);
        when(imovel.getId()).thenReturn(1L);
        when(imovel.getEndereco()).thenReturn(endereco);
        when(enderecoService.salvar(any(Endereco.class))).thenReturn(endereco);
        when(entityConverter.converterStrict(Matchers.<LinkedHashMap<String, Object>>any(), eq(targetType))).thenReturn(imovelDTO);

        when(posseInformalService.consultarNumeroDestinacao(anyString())).thenReturn(asList(destinacaoDTO));
        when(imagemDTO.getImagem()).thenReturn(BASE64_IMAGENS_IMOVEL);
        when(imovelDTO.getImagens()).thenReturn(asList(imagemDTO));
        when(destinacaoImovelDTO.getImovel()).thenReturn(imovelDTO);
        when(usuarioLogadoDTO.getCpf()).thenReturn("123");
        when(usuarioService.getUsuarioLogado()).thenReturn(usuarioLogadoDTO);
        when(arquivoService.findListaArquivoById(anyList())).thenReturn(asList(arquivo));
        when(imovelRepository.quantidadesDestinacaoAtivaImovel(anyString())).thenReturn(2);
        when(mensagemNegocio.get(anyString())).thenReturn("Rip invalido");
        when(primeiraBenfeitoriaDTO.getId()).thenReturn(1L);
        when(primeiraBenfeitoriaDTO.getAreaConstruida()).thenReturn(new BigDecimal(100));
        when(segundaBenfeitoriaDTO.getId()).thenReturn(2L);
        when(segundaBenfeitoriaDTO.getAreaConstruida()).thenReturn(new BigDecimal(20));
        when(imovelDTO.getBenfeitorias()).thenReturn(asList(primeiraBenfeitoriaDTO, segundaBenfeitoriaDTO));
        when(benfeitoriaDestinadaService.buscarMapaBenfeitoriasIdImovel(anyString())).thenReturn(criarMapaBenfeitoriasDestinadas());
        when(benfeitoriaService.salvar(anyList(), any(Parcela.class), any(Imovel.class))).thenReturn(new ArrayList<>());
        when(imovelRepository.findByIdCadastroImovel(anyLong())).thenReturn(imovel);
        when(benfeitoriaDestinada.getIdBenfeitoria()).thenReturn(1L);
        when(benfeitoriaDestinada.getAreaUtilizar()).thenReturn(new BigDecimal(50));
        BigDecimal area = new BigDecimal(100);
        when(benfeitoria.getAreaDisponivel()).thenReturn(area);
        when(benfeitoria.getAreaConstruida()).thenReturn(area);
        when(imovel.getBenfeitorias()).thenReturn(asList(benfeitoria));
        when(imovel.getUnidadeAutonoma()).thenReturn(unidadeAutonoma);
        when(unidadeAutonoma.getArea()).thenReturn(area);
        when(parcelaService.salvarParcelaInicial(any(Imovel.class), any(DestinacaoImovel.class))).thenReturn(parcela);
        when(parcela.getId()).thenReturn(1L);
        when(validadorRipStrategyFactory.createBean(TipoDestinacaoEnum.CDRU)).thenReturn(validadorRip);
        when(imovelRepository.buscarPorRipParcelaAtiva(anyString())).thenReturn(Arrays.asList());
        when(benfeitoriaService.extrairBenfeitorias(anyList())).thenReturn(Arrays.asList());
        when(imovel.getParcelas()).thenReturn(Arrays.asList());
        when(imovelRepository.buscarPorRipParcelaAtiva(anyString())).thenReturn(asList(imovel));

    }

    private Map<Long, BigDecimal> criarMapaBenfeitoriasDestinadas() {
        Map<Long, BigDecimal> mapa = new HashMap<>();
        mapa.put(1L, new BigDecimal(20));
        return mapa;
    }

    @Test
    @SneakyThrows
    public void buscarPorRip(){
        Imovel imovelTeste = imovelService.buscarPorRip(RIP);
        assertNotNull(imovelTeste);
    }


    @Test(expected = NegocioException.class)
    @SneakyThrows
    public void consultarImovelRipDestinacaoTransferenciaIntegracao(){

        ImovelDTO imovelDTOMock = new ImovelDTO();
        imovelDTOMock.setId(1l);
        imovelDTOMock.setRip(RIP);

        SituacaoImovelDTO situacaoImovelDTO = new SituacaoImovelDTO();
        situacaoImovelDTO.setId(1l);
        situacaoImovelDTO.setDescricao("Situação Imovel");
        imovelDTOMock.setSituacaoImovel(situacaoImovelDTO);

        List<Imovel> imoveis = new ArrayList<>();

        when(imovelRepository.buscarPorRipParcelaAtiva(RIP)).thenReturn(imoveis);
        when(entityConverter.converterStrict(anyObject(), eq(ImovelDTO.class))).thenReturn(imovelDTOMock);

        ImovelDTO imovelDTO = imovelService.consultarImovelRip(RIP, "");
        assertNotNull(imovelDTO);
    }


    @Test(expected = NegocioException.class)
    @SneakyThrows
    public void consultarImovelRipTeste(){

        ImovelDTO imovelDTOMock = new ImovelDTO();
        imovelDTOMock.setId(1l);
        imovelDTOMock.setRip(RIP);

        ImovelDTO imovelDTOMock2 = new ImovelDTO();
        imovelDTOMock2.setId(2l);
        imovelDTOMock2.setRip(RIP);

        SituacaoImovelDTO situacaoImovelDTO = new SituacaoImovelDTO();
        situacaoImovelDTO.setId(3l);
        situacaoImovelDTO.setDescricao("Situação Imovel");
        imovelDTOMock2.setSituacaoImovel(situacaoImovelDTO);


        //when(entityConverter.converterStrict(any(Imovel.class), eq(ImovelDTO.class))).thenReturn(imovelDTOMock2);
        when(entityConverter.converterStrict(any(ImovelDTO.class), eq(targetType))).thenReturn(imovelDTOMock2);

        when(resposta.getResultado()).thenReturn(imovelDTOMock);
        when(imovelService.getImovelRipValido(RIP)).thenReturn(imovelDTOMock);


        ImovelDTO imovelDTO = imovelService.consultarImovelRip(RIP, "");
        assertNotNull(imovelDTO);
    }

    @Test
    public void salvar () {
        Imovel imovelMock = new Imovel();
        imovelMock.setId(1l);
        imovelMock.setRip(RIP);

        Imovel imovelSalvo = imovelService.salvar(imovel, destinacaoImovel);

    }

    @Test
    public void isImovelDestinado() {
        when(imovelRepository.quantidadesDestinacaoImovel(anyString())).thenReturn(3);
        Boolean imovelDestinado = imovelService.isImovelDestinado("0000007");
        assertTrue(imovelDestinado);
    }

    @Test
    public void isImovelDestinacaoAtiva(){
        when(imovelRepository.quantidadesDestinacaoAtivaImovel(anyString())).thenReturn(3);
        Boolean imovelDestinado = imovelService.isImovelDestinacaoAtiva("rip");
        assertTrue(imovelDestinado);
    }

    @Test
    public void findByIdCadastroImovel() {
        when(imovelRepository.findByIdCadastroImovel(anyLong())).thenReturn(imovel);
        Imovel imovelRecuperado = imovelService.findByIdCadastroImovel(1L);
        assertNotNull(imovelRecuperado);
    }

    @Test
    public void findById() {
        when(imovelRepository.findOne(anyLong())).thenReturn(imovel);
        Imovel imovelRecuperado = imovelService.findById(1L);
        assertNotNull(imovelRecuperado);
    }

    @Test
    public void getIdImovelByIdCadastroImovel(){
        when(imovelRepository.getIdImovelByIdCadastroImovel(anyLong())).thenReturn(1L);
        Long cadastroImovel = imovelService.getIdImovelByIdCadastroImovel(1L);
        assertNotNull(cadastroImovel);
    }

    @Test
    @SneakyThrows
    public void buscarTodasDestinacoesPorRip () {
        List<UtilizacaoDTO> utilizacaoDTOS = imovelService.buscarTodasDestinacoesPorRip("rip");
        assertNotNull(utilizacaoDTOS);
    }

    @Test
    public void inativar(){
        imovelService.inativar(imovel);
        assertFalse(imovel.getAtivo());
    }

    @Test
    public void buscarImoveisPorRip(){
        List<Imovel> imovelList = imovelService.buscarImoveisPorRip(RIP);
        assertNotNull(imovelList);
    }

//    @Test
//    @SneakyThrows
//    public void consultarImovelRip(){
//
//        ImovelDTO imovelDTOMock = new ImovelDTO();
//        imovelDTOMock.setId(1l);
//        imovelDTOMock.setNumeroProcesso(RIP);
//
//        when(imovelService.buscarImovel(RIP)).thenReturn(imovelDTOMock);
//        ImovelDTO imovel = imovelService.getImovelRipValido(RIP);
//        assertNotNull(imovel);
//    }

    @Test
    public void buscarImovel(){
        List<Imovel> imoveis = imovelRepository.buscarPorRipParcelaAtiva(RIP);
        assertNotNull(imoveis);
    }

    @Test
    @SneakyThrows
    public void buscarListaSuspensoesImovelPorRipTrue() {

        when(imovelRepository.buscarDestinacao(RIP, "70755030", "DF", "brasilia", pageable)).thenReturn(pageImovelDto);
        when(requestUtils.doGet(anyString(), eq(List.class))).thenReturn(responseEntity);
        when(responseEntity.getBody()).thenReturn(Arrays.asList(imovelDTO));

        ConsultaImovelDTO consultaImovelDTO = new ConsultaImovelDTO();
        consultaImovelDTO.setIdModalidade(1L);
        consultaImovelDTO.setRip("00000001");


        List<SuspensaoImovelDTO> lista = imovelService.getListaDadosSuspensaoPorRip(consultaImovelDTO);
        assertNotNull(lista);
    }

    @Test
    @SneakyThrows
    public void concatenaVirgulaSe() {
        List<MotivacaoSuspensaoImovelDTO> lista = new ArrayList<>();

        MotivacaoSuspensaoImovelDTO motivacaoSuspensaoImovelDTO = new MotivacaoSuspensaoImovelDTO();
        motivacaoSuspensaoImovelDTO.setId(1l);
        motivacaoSuspensaoImovelDTO.setDescricao("motivo suspensao");

        MotivacaoSuspensaoImovelDTO motivacaoSuspensaoImovelDTO2 = new MotivacaoSuspensaoImovelDTO();
        motivacaoSuspensaoImovelDTO2.setId(1l);
        motivacaoSuspensaoImovelDTO2.setDescricao("motivo suspensao");

        lista.add(motivacaoSuspensaoImovelDTO);
        lista.add(motivacaoSuspensaoImovelDTO2);
        String saida = imovelService.concatenaVirgula(lista);
        assertNotNull(saida);

    }

    @Test
    @SneakyThrows
    public void concatenaVirgula() {
        List<MotivacaoSuspensaoImovelDTO> lista = new ArrayList<>();

        MotivacaoSuspensaoImovelDTO motivacaoSuspensaoImovelDTO = new MotivacaoSuspensaoImovelDTO();
        motivacaoSuspensaoImovelDTO.setId(1l);
        motivacaoSuspensaoImovelDTO.setDescricao("motivo suspensao");

        lista.add(motivacaoSuspensaoImovelDTO);
        String saida = imovelService.concatenaVirgula(lista);
        assertNotNull(saida);

    }


    @Test
    @SneakyThrows
    public void consultarImovelRipValidando() {

        ConsultaImovelDTO consultaImovelDTO = new ConsultaImovelDTO();
        consultaImovelDTO.setIdModalidade(1L);
        consultaImovelDTO.setRip(RIP);
        consultaImovelDTO.setSequencialParcela("P0");

        consultaImovelDTO.setTipoDestinacao(TipoDestinacaoEnum.SEM_UTILIZACAO.getDescricao());

        ImovelDTO imovelDTOMock = new ImovelDTO();
        imovelDTOMock.setId(1l);
        imovelDTOMock.setNumeroProcesso(RIP);

        Imovel imovel = new Imovel();
        imovel.setId(imovelDTOMock.getId());
        imovel.setRip(imovelDTOMock.getRip());

        DestinacaoImovel destinacaoImovel = new DestinacaoImovel();
        destinacaoImovel.setId(1l);
        destinacaoImovel.setCodigoUtilizacao("0000");
        destinacaoImovel.setUltimaDestinacao(true);


        Parcela parcela = new Parcela();
        parcela.setId(1L);
        parcela.setAtiva(true);
        parcela.setSequencial("P0");


        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);



        List<Benfeitoria> benfeitorias = new ArrayList<>();
        benfeitorias.add(benfeitoria);

        parcela.setBenfeitorias(benfeitorias);

        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        ParcelaDTO parcelaDTO = new ParcelaDTO();
        parcelaDTO.setId(parcela.getId());
        parcelaDTO.setSequencial(parcela.getSequencial());
        parcelaDTO.setAtiva(true);

        parcelaDTO.setBenfeitorias(new ArrayList<>());

        BenfeitoriaDTO benfeitoriaDTO = new BenfeitoriaDTO();
        benfeitoriaDTO.setAtiva(true);
        benfeitoriaDTO.setId(1l);
        parcelaDTO.getBenfeitorias().add(benfeitoriaDTO);

        destinacaoImovel.setParcelas(parcelas);
        imovelDTOMock.setParcela(parcelaDTO);

        when(imovelService.getImovelRipValido(RIP)).thenReturn(imovelDTOMock);
        when(validadorRipStrategyFactory.createBean(any(TipoDestinacaoEnum.class))).thenReturn(validadorRip);
        when(entityConverter.converter(any(ImovelDTO.class), eq(Imovel.class))).thenReturn(imovel);
        when(destinacaoImovelService.findByIdImovelSequencial(anyLong())).thenReturn(destinacaoImovel);
        when(parcelaService.buscarParcelaPorIdImovelSequencial(anyLong(), anyString())).thenReturn(parcela);
        when(entityConverter.converterStrict(any(Parcela.class), eq(ParcelaDTO.class))).thenReturn(parcelaDTO);
        ImovelDTO imovelDTO = imovelService.consultarImovelRipValidando(consultaImovelDTO);
        assertNotNull(imovelDTO);
    }

    @Test
    public void  mesclarDadosImovel(){
        ImovelDTO imovelDTO = new ImovelDTO();
        imovelDTO.setId(1l);
        imovelDTO.setNumeroProcesso("010101");

        ImovelDTO imovelDTOCadastro = new ImovelDTO();
        imovelDTOCadastro.setId(2l);
        imovelDTOCadastro.setLatitude(200d);
        imovelDTOCadastro.setLongitude(100d);

        String tipoDestinacao = TipoDestinacaoEnum.CESSAO_ONEROSA.getDescricao();

        imovelService.mesclarDadosImovel(imovelDTO, imovelDTOCadastro, tipoDestinacao);
    }

    @Test
    @SneakyThrows
    public void buscarDadosRipUtilizacao(){

        Parcela parcela = new Parcela();
        List<Parcela> parcelaList = new ArrayList<>();
        parcelaList.add(parcela);
        parcela.setId(1L);
        parcela.setAtiva(true);

        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);

        List<Benfeitoria> benfeitorias = new ArrayList<>();
        benfeitorias.add(benfeitoria);

        Imovel imovel = new Imovel();
        imovel.setId(1l);
        imovel.setRip("00000001");

        imovel.setParcelas(parcelaList);
        imovel.setBenfeitorias(benfeitorias);


        DestinacaoImovel destinacaoImovel = new DestinacaoImovel();
        destinacaoImovel.setId(1l);
        destinacaoImovel.setCodigoUtilizacao("0000");
        destinacaoImovel.setUltimaDestinacao(true);

        Destinacao destinacao = new Destinacao();
        destinacao.setId(1l);

        destinacaoImovel.setDestinacao(destinacao);
        List<DestinacaoImovel> destinacaoImovels = new ArrayList<>();
        destinacaoImovels.add(destinacaoImovel);

        parcela.setDestinacaoImoveis(destinacaoImovels);
        parcela.setBenfeitorias(benfeitorias);
        imovel.setDestinacoes(destinacaoImovels);

        Set<PendenciaDTO> pendenciaDTOSet = new HashSet<>();
        PendenciaDTO pendenciaDTO = new PendenciaDTO();
        pendenciaDTO.setDataGerada(new Date());
        pendenciaDTOSet.add(pendenciaDTO);

        Set<Long> listaids = new HashSet<>();
        listaids.add(1L);
        when(destinacaoPendenciaService.buscarPendenciasPorIdDestinacao(1l)).thenReturn(pendenciaDTOSet);
        when(destinacaoImovelService.findByDestinacaoImovelById(1l)).thenReturn(destinacaoImovels);
        when(parcelaService.buscarIdsParcelasUtilizadasPorImovelId(1l)).thenReturn(listaids);

        when(imovelRepository.buscarDadosRipUtilizacao(RIP)).thenReturn(imovel);
        Imovel retornaImovel = imovelService.buscarDadosRipUtilizacao(RIP);
        assertNotNull(retornaImovel);
    }


    @Test
    public void setarParcela(){
        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);

        Set<Long> idsParcelasUtilizadas = new HashSet<Long>();
        idsParcelasUtilizadas.add(1l);
        idsParcelasUtilizadas.add(2l);

        DestinacaoImovel destinacaoImovel = new DestinacaoImovel();
        destinacaoImovel.setId(1l);
        destinacaoImovel.setCodigoUtilizacao("0000");
        destinacaoImovel.setUltimaDestinacao(true);

        List<DestinacaoImovel> destinacaoImovels = new ArrayList<>();
        destinacaoImovels.add(destinacaoImovel);


        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);

        List<Benfeitoria> benfeitorias = new ArrayList<>();
        benfeitorias.add(benfeitoria);

        parcela.setBenfeitorias(benfeitorias);

        parcela.setDestinacaoImoveis(destinacaoImovels);
        imovelService.setarParcela(parcela, idsParcelasUtilizadas);
    }


    @Test
    public void removerBenfeitoriaLista(){

        List<Benfeitoria> lista = new ArrayList<>();
        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);

        Set<Long> idsParcelasUtilizadas = new HashSet<Long>();
        idsParcelasUtilizadas.add(1l);
        idsParcelasUtilizadas.add(2l);

        DestinacaoImovel destinacaoImovel = new DestinacaoImovel();
        destinacaoImovel.setId(1l);
        destinacaoImovel.setCodigoUtilizacao("0001");
        destinacaoImovel.setUltimaDestinacao(true);

        parcela.setDestinacaoImoveis(new ArrayList<>());
        parcela.getDestinacaoImoveis().add(destinacaoImovel);

        benfeitoria.setParcela(parcela);

        lista.add(benfeitoria);

        imovelService.removerBenfeitoriaLista(lista, benfeitoria);
    }


    @Test
    public void tratarParcelas() {

        List<Benfeitoria> lista = new ArrayList<>();
        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setAtiva(true);

        Set<Long> idsParcelasUtilizadas = new HashSet<Long>();
        idsParcelasUtilizadas.add(1l);
        idsParcelasUtilizadas.add(2l);

        DestinacaoImovel destinacaoImovel = new DestinacaoImovel();
        destinacaoImovel.setId(1l);
        destinacaoImovel.setCodigoUtilizacao("0001");
        destinacaoImovel.setUltimaDestinacao(true);

        parcela.setDestinacaoImoveis(new ArrayList<>());
        parcela.getDestinacaoImoveis().add(destinacaoImovel);

        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        benfeitoria.setParcela(parcela);

        lista.add(benfeitoria);

        parcela.setBenfeitorias(lista);
        Imovel imovel = new Imovel();
        imovel.setId(1l);
        imovel.setBenfeitorias(lista);
        imovel.setParcelas(parcelas);

        imovelService.tratarParcelas(imovel);
    }


    @Test
    public void adicionarBenfeitoriaParcela() {

        List<Benfeitoria> lista = new ArrayList<>();
        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setAtiva(true);

        Set<Long> idsParcelasUtilizadas = new HashSet<Long>();
        idsParcelasUtilizadas.add(1l);
        idsParcelasUtilizadas.add(2l);

        DestinacaoImovel destinacaoImovel = new DestinacaoImovel();
        destinacaoImovel.setId(1l);
        destinacaoImovel.setCodigoUtilizacao("0001");
        destinacaoImovel.setUltimaDestinacao(true);

        parcela.setDestinacaoImoveis(new ArrayList<>());
        parcela.getDestinacaoImoveis().add(destinacaoImovel);

        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        benfeitoria.setParcela(parcela);

        lista.add(benfeitoria);

        parcela.setBenfeitorias(lista);
        Imovel imovel = new Imovel();
        imovel.setId(1l);
        imovel.setBenfeitorias(lista);
        imovel.setParcelas(parcelas);

        imovelService.adicionarBenfeitoriaParcela(imovel, 1, lista);
    }


    @Test
    public void tratarParcelasComPendenciaComPendencia() {

        List<Benfeitoria> lista = new ArrayList<>();
        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setAtiva(true);

        Set<Long> idsParcelasUtilizadas = new HashSet<Long>();
        idsParcelasUtilizadas.add(1l);
        idsParcelasUtilizadas.add(2l);

        DestinacaoImovel destinacaoImovel = new DestinacaoImovel();
        destinacaoImovel.setId(1l);
        destinacaoImovel.setCodigoUtilizacao("0001");
        destinacaoImovel.setUltimaDestinacao(true);

        parcela.setDestinacaoImoveis(new ArrayList<>());
        parcela.getDestinacaoImoveis().add(destinacaoImovel);

        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        benfeitoria.setParcela(parcela);

        lista.add(benfeitoria);

        parcela.setBenfeitorias(lista);
        Imovel imovel = new Imovel();
        imovel.setId(1l);
        imovel.setBenfeitorias(lista);
        imovel.setParcelas(parcelas);

        imovelService.tratarParcelasComPendencia(imovel, 1);
    }


    @Test
    public void tratarParcelasComPendenciaSemPendencia() {

        List<Benfeitoria> lista = new ArrayList<>();
        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setAtiva(true);

        Set<Long> idsParcelasUtilizadas = new HashSet<Long>();
        idsParcelasUtilizadas.add(1l);
        idsParcelasUtilizadas.add(2l);

        DestinacaoImovel destinacaoImovel = new DestinacaoImovel();
        destinacaoImovel.setId(1l);
        destinacaoImovel.setCodigoUtilizacao("0001");
        destinacaoImovel.setUltimaDestinacao(true);

        parcela.setDestinacaoImoveis(new ArrayList<>());
        parcela.getDestinacaoImoveis().add(destinacaoImovel);

        benfeitoria.setParcela(parcela);

        lista.add(benfeitoria);
        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        parcela.setBenfeitorias(lista);
        parcela.setListaBenfeitorias(lista);
        Imovel imovel = new Imovel();
        imovel.setId(1l);
        imovel.setBenfeitorias(lista);
        imovel.setParcelas(parcelas);

        imovelService.adicionarBenfeitoriaParcela(imovel, 0, lista);
    }

    @Test
    public void montarParcelas() {

        List<Benfeitoria> lista = new ArrayList<>();
        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setSequencial("P0");

        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        benfeitoria.setParcela(parcela);
        lista.add(benfeitoria);

        imovelService.montarParcelas(parcelas, lista);
    }

    @Test
    @SneakyThrows
    public void buscarDadosBenfeitorias(){

        List<Benfeitoria> lista = new ArrayList<>();
        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setAtiva(true);
        parcela.setSequencial("P0");

        Set<Long> idsParcelasUtilizadas = new HashSet<Long>();
        idsParcelasUtilizadas.add(1l);
        idsParcelasUtilizadas.add(2l);

        DestinacaoImovel destinacaoImovel = new DestinacaoImovel();
        destinacaoImovel.setId(1l);
        destinacaoImovel.setCodigoUtilizacao("0001");
        destinacaoImovel.setUltimaDestinacao(true);

        parcela.setDestinacaoImoveis(new ArrayList<>());
        parcela.getDestinacaoImoveis().add(destinacaoImovel);

        benfeitoria.setParcela(parcela);

        lista.add(benfeitoria);
        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        parcela.setBenfeitorias(lista);
        parcela.setListaBenfeitorias(lista);
        Imovel imovelMock = new Imovel();
        imovelMock.setId(1l);
        imovelMock.setBenfeitorias(lista);
        imovelMock.setParcelas(parcelas);

        when(imovelRepository.buscarDadosBenfeitorias(RIP)).thenReturn(imovelMock);
        Imovel imovel = imovelService.buscarDadosBenfeitorias(RIP);

        assertNotNull(imovel);
    }

    @Test
    @SneakyThrows
    public void extrairBenfeitoriasParcela() {

        List<Benfeitoria> lista = new ArrayList<>();
        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setSequencial("P0");

        parcela.setBenfeitorias(lista);
        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        benfeitoria.setParcela(parcela);
        lista.add(benfeitoria);

        List<Benfeitoria> listaBenfeitorias = imovelService.extrairBenfeitoriasParcela(parcelas);

        assertNotNull(listaBenfeitorias);
        assertTrue(listaBenfeitorias != null);
    }

    @Test
    @SneakyThrows
    public void consultarImovelRipThrowsNegocio(){


        ImovelDTO imovelDTOMock = new ImovelDTO();
        imovelDTOMock.setId(1l);
        imovelDTOMock.setRip(RIP);

        SituacaoImovelDTO situacaoImovelDTO = new SituacaoImovelDTO();
        situacaoImovelDTO.setId(1l);
        situacaoImovelDTO.setDescricao("Situação Imovel");
        imovelDTOMock.setSituacaoImovel(situacaoImovelDTO);


        when(entityConverter.converterStrict(any(Imovel.class), eq(ImovelDTO.class))).thenReturn(imovelDTOMock);
        when(imovelService.getImovelRipValido(RIP)).thenReturn(imovelDTO);
        when(imovelService.getImovelCadastroImoveis(RIP)).thenReturn(imovelDTOMock);

        ImovelDTO imovelDTO = imovelService.consultarImovelRip(RIP, "");
        assertNotNull(imovelDTO);
    }

    @Test
    @SneakyThrows
    public void buscarListaSuspensoesImovelPorRip() {

        ImovelDTO imovelDTOMock = new ImovelDTO();
        imovelDTOMock.setId(1l);
        imovelDTOMock.setRip(RIP);


        ConsultaImovelDTO consultaImovelDTO = new ConsultaImovelDTO();
        consultaImovelDTO.setIdModalidade(1L);
        consultaImovelDTO.setRip(RIP);

        SuspensaoImovelDTO suspensaoImovelDTO = new SuspensaoImovelDTO();
        suspensaoImovelDTO.setId(1l);
        suspensaoImovelDTO.setDescricao("Suspenção");
        suspensaoImovelDTO.setAtivo(true);

        MotivacaoSuspensaoImovelDTO motivacaoSuspensaoImovelDTO = new MotivacaoSuspensaoImovelDTO();
        motivacaoSuspensaoImovelDTO.setId(1l);
        motivacaoSuspensaoImovelDTO.setDescricao("Motivação");
        motivacaoSuspensaoImovelDTO.setOrdem(1l);

        suspensaoImovelDTO.setMotivacao(motivacaoSuspensaoImovelDTO);

        List<SuspensaoImovelDTO> listaMotivo = new ArrayList<SuspensaoImovelDTO>();
        listaMotivo.add(suspensaoImovelDTO);

        when(requestUtils.doGet(anyString(), eq(List.class))).thenReturn(responseEntity);
        when(responseEntity.getBody()).thenReturn(Arrays.asList(suspensaoImovelDTO));
        imovelService.buscarListaSuspensoesImovelPorRip(consultaImovelDTO);
   }


    @Test
    @SneakyThrows
    public void consultarImovelRipPosseInformal() {
        DestinacaoDTO destinacao = new DestinacaoDTO();
        destinacao.setId(1l);

        ImovelDTO imovelDTOMock = new ImovelDTO();
        imovelDTOMock.setId(1l);
        imovelDTOMock.setRip(RIP);

        SituacaoImovelDTO situacaoImovelDTO = new SituacaoImovelDTO();
        situacaoImovelDTO.setId(1l);
        situacaoImovelDTO.setDescricao("Situacao");

        imovelDTOMock.setSituacaoImovel(situacaoImovelDTO);

        List<DestinacaoDTO> destinacaoDTOs = new ArrayList<>();
        destinacaoDTOs.add(destinacao);

        when(entityConverter.converterStrict(any(Imovel.class), eq(ImovelDTO.class))).thenReturn(imovelDTOMock);
        when(posseInformalService.consultarNumeroDestinacao(RIP)).thenReturn(destinacaoDTOs);
        when(imovelService.getImovelRipValido(RIP)).thenReturn(imovelDTOMock);

        ImovelDTO imovelDTO2 = imovelService.consultarImovelRipPosseInformal(RIP, anyString());

        assertNotNull(imovelDTO2);

    }

    @Test(expected = IntegracaoException.class)
    @SneakyThrows
    public void consultarImovelRipPosseInformalErro() {
        when(imovelService.getImovelRipValido(RIP)).thenThrow(NegocioException.class);
        imovelService.consultarImovelRipPosseInformal(RIP, "");
     }

    @Test
    @SneakyThrows
    public void consultarImovelRipParcela(){
        ImovelDTO imovelDTOMock = new ImovelDTO();
        imovelDTOMock.setId(1l);
        imovelDTOMock.setRip(RIP);

        DestinacaoDTO destinacaoDTO = new DestinacaoDTO();
        destinacaoDTO.setId(1l);
        destinacaoDTO.setAtiva(true);
        when(imovelService.getImovelRipValido(RIP)).thenReturn(imovelDTOMock);
        when(posseInformalService.consultarNumeroDestinacao(RIP)).thenReturn(Arrays.asList(destinacaoDTO));

        ImovelDTO imovel = imovelService.consultarImovelRip(RIP, "");
        assertNotNull(imovel);
    }


    @Test
    @SneakyThrows
    public void consultarImovelPosseInformal(){
        ImovelDTO imovelDTOMock = new ImovelDTO();
        imovelDTOMock.setId(1l);
        imovelDTOMock.setRip(RIP);
        when(imovelService.getImovelRipValido(RIP)).thenReturn(imovelDTOMock);
        when(imovelRepository.buscarDadosPosseInformal(anyString())).thenReturn(imovelDTOMock);


        when(imovelService.getImovelCadastroImoveis(anyString())).thenReturn(imovelDTOMock);
        when(posseInformalService.consultarNumeroDestinacao(RIP)).thenReturn(Arrays.asList(destinacaoDTO));

        ImovelDTO imovel = imovelService.consultarImovelRip(RIP, "");
        assertNotNull(imovel);
    }


    @Test
    @SneakyThrows
    public void consultarDadosPosseInformal(){
        ImovelDTO imovelMock = new ImovelDTO();
        imovelMock.setId(1l);
        imovelMock.setRip(RIP);
        imovelMock.setCodigoClassificacaoImovel(10l);
        imovelMock.setCodigoNaturezaImovel(1l);
        imovelMock.setCodigoSituacaoIncorporacao(2l);
        imovelMock.setCodigoTipoImovel(3l);
        imovelMock.setCodigoSituacaoIncorporacao(4l);
        imovelMock.setProprietario("Teste");

        ImovelDTO imovelMock2 = new ImovelDTO();
        imovelMock2.setId(1l);
        imovelMock2.setRip(RIP);
        imovelMock2.setCodigoClassificacaoImovel(30l);
        imovelMock2.setCodigoNaturezaImovel(1l);
        imovelMock2.setCodigoSituacaoIncorporacao(2l);

        Imovel imovel= new Imovel();
        imovel.setId(1l);
        imovel.setRip(RIP);
        imovel.setCodigoClassificacaoImovel(30l);
        imovel.setCodigoNaturezaImovel(1l);
        imovel.setCodigoSituacaoIncorporacao(2l);


        DestinacaoImovel destinacaoImovelMock = new DestinacaoImovel();
        destinacaoImovelMock.setId(1l);
        destinacaoImovelMock.setCodigoUtilizacao("0001");
        destinacaoImovelMock.setUltimaDestinacao(true);

        Destinacao destinacaoMock = new Destinacao();
        destinacaoMock.setId(1l);

        destinacaoImovelMock.setDestinacao(destinacaoMock);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setSequencial("P0");

        ParcelaDTO parcelaDTO = new ParcelaDTO();
        parcelaDTO.setId(1l);
        parcelaDTO.setUtilizada(true);
        parcelaDTO.setSequencial("P0");

        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        destinacaoImovelMock.setParcelas(parcelas);

        OcupanteDTO ocupanteDTO = new OcupanteDTO();
        ocupanteDTO.setId(1l);

        List<OcupanteDTO> ocupanteDTOs = new ArrayList<>();
        ocupanteDTOs.add(ocupanteDTO);


        when(imovelRepository.buscarDadosPosseInformal(RIP)).thenReturn(imovelMock);
        when(imovelService.getImovelCadastroImoveis(RIP)).thenReturn(imovelMock2);


        when(destinacaoImovelService.findByIdImovelSequencialParcelaCodigoUtilizacao(anyLong(), anyString(), anyString())).thenReturn(destinacaoImovelMock);
        when(ocupanteService.findByIdPosseInformal(anyLong())).thenReturn(ocupanteDTOs);
        when(imovelRepository.buscarPorRipParcelaAtiva(RIP)).thenReturn(Arrays.asList(imovel));
        ImovelDTO imovelDTO2 = imovelService.consultarDadosPosseInformal(RIP, "", "");

        assertNotNull(imovelDTO2);

    }


    @Test(expected = IntegracaoException.class)
    @SneakyThrows
    public void consultarDadosPosseInformalThrows(){
        when(imovelRepository.buscarDadosPosseInformal(RIP)).thenReturn(imovelDTO);
        when(imovelService.getImovelCadastroImoveis(RIP)).thenReturn(imovelDTO);
        when(destinacaoImovelService.findByIdImovelSequencialParcelaCodigoUtilizacao(anyLong(), anyString(), anyString())).thenReturn(null);
        imovelService.consultarDadosPosseInformal(RIP, "", "");

//        assertNotNull(imovelDTO2);

    }

    @Test
    @SneakyThrows
    public void consultarDestinacao() {
        ImovelDTO imovelDTO = new ImovelDTO();
        imovelDTO.setId(1l);
        imovelDTO.setRip(RIP);

        ParcelaDTO parcelaDTO = new ParcelaDTO();
        parcelaDTO.setId(1l);
        parcelaDTO.setRip(RIP);

        List<ImovelDTO> lista = new ArrayList<>();
        lista.add(imovelDTO);

        when(imovelRepository.buscarDestinacao(anyString(),anyString(),anyString(),anyString(),any(Pageable.class))).thenReturn(pageImovelDto);
        when(pageImovelDto.getContent()).thenReturn(lista);
        when(benfeitoriaService.somaAreaConstruida(anyString())).thenReturn(new BigDecimal(10));
        when(parcelaService.buscarParcelasPorIdImovel(anyString())).thenReturn(Arrays.asList(parcelaDTO));
        Page<ImovelDTO> page = imovelService.consultarDestinacao("","","","",1,1);
        assertNotNull(page);
    }

    @Test
    @SneakyThrows
    public void consultarImovelRipParcelaTest(){
        ImovelDTO imovelDTOMock = new ImovelDTO();
        imovelDTOMock.setId(1l);
        imovelDTOMock.setRip(RIP);

        Imovel imovelTest = new Imovel();
        imovelTest.setId(1l);
        imovelTest.setRip(RIP);

        DestinacaoDTO destinacaoDTO = new DestinacaoDTO();
        destinacaoDTO.setId(1l);
        destinacaoDTO.setAtiva(true);

        UtilizacaoDTO utilizacaoDTOMock = new UtilizacaoDTO();
        utilizacaoDTOMock.setId(1l);
        utilizacaoDTOMock.setEspecificacao("Utilizacao");

        ConsultaImovelDTO consultaImovelDTOMock = new ConsultaImovelDTO();
        consultaImovelDTOMock.setRip(RIP);
        consultaImovelDTOMock.setTipoDestinacao("TipoDestinacao");
        consultaImovelDTOMock.setIdModalidade(1l);
        consultaImovelDTOMock.setSequencialParcela("P0");

        FundamentoLegalDTO fundamentoLegalDTO = new FundamentoLegalDTO();
        fundamentoLegalDTO.setId(1l);
        fundamentoLegalDTO.setDescricao("Fundamento Legal");

        consultaImovelDTOMock.setFundamentoLegal(fundamentoLegalDTO);

        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setSequencial("P0");
        parcela.setBenfeitorias(Arrays.asList(benfeitoria));

        BenfeitoriaDTO benfeitoriaDTO = new BenfeitoriaDTO();
        benfeitoriaDTO.setId(1l);
        benfeitoriaDTO.setAtiva(true);


        ParcelaDTO parcelaDTO = new ParcelaDTO();
        parcelaDTO.setId(1l);
        parcelaDTO.setUtilizada(true);
        parcelaDTO.setSequencial("P0");
        parcelaDTO.setBenfeitorias(Arrays.asList(benfeitoriaDTO));

        DestinacaoImovel destinacaoImovelMock = new DestinacaoImovel();
        destinacaoImovelMock.setId(1l);
        destinacaoImovelMock.setCodigoUtilizacao("0001");
        destinacaoImovelMock.setUltimaDestinacao(true);
        destinacaoImovelMock.setParcelas(Arrays.asList(parcela));


        imovelDTOMock.setParcela(parcelaDTO);

        when(imovelService.getImovelRipValido(RIP)).thenReturn(imovelDTOMock);
        when(posseInformalService.consultarNumeroDestinacao(RIP)).thenReturn(Arrays.asList(destinacaoDTO));
        when(imovelService.buscarTodasDestinacoesPorRip(anyString())).thenReturn(Arrays.asList(utilizacaoDTOMock));
        when(validadorRipStrategyFactory.createBean(anyObject())).thenReturn(validadorRip);

        doNothing().when(validadorRip).validar(anyObject(), anyLong(), anyObject());
        when(entityConverter.converter(any(ImovelDTO.class), eq(Imovel.class))).thenReturn(imovelTest);
        when(destinacaoImovelService.findByIdImovelSequencial(anyLong())).thenReturn(destinacaoImovelMock);
        when(parcelaService.buscarParcelaPorIdImovelSequencial(anyLong(), anyString())).thenReturn(parcela);
        when(entityConverter.converterStrict(any(Parcela.class), eq(ParcelaDTO.class))).thenReturn(parcelaDTO);
        ImovelDTO imovel = imovelService.consultarImovelRipParcela(consultaImovelDTOMock);
        assertNotNull(imovel);
    }


    @Test
    @SneakyThrows
    public void atualizarImovel() {
        Imovel imovelMock = new Imovel();
        imovelMock.setId(1l);
        imovelMock.setRip(RIP);
        imovelMock.setAreaTerreno(new BigDecimal(10));
        imovelMock.setCodigoClassificacaoImovel(10l);

        ParcelaDTO parcelaDTO = new ParcelaDTO();
        parcelaDTO.setId(1l);
        parcelaDTO.setRip(RIP);

        List<ImovelDTO> lista = new ArrayList<>();
        lista.add(imovelDTO);

        when(imovelRepository.findByRip(RIP)).thenReturn(imovelMock);
        Imovel imovel = imovelService.atualizarImovel(imovelMock);
        assertNotNull(imovel);
    }



    @Test
    @SneakyThrows
    public void atualizarTest() {
        Imovel imovelMock = new Imovel();
        imovelMock.setId(1l);
        imovelMock.setRip(RIP);
        imovelMock.setAreaTerreno(new BigDecimal(10));
        imovelMock.setCodigoClassificacaoImovel(10l);
        imovelMock.setCodigoNaturezaImovel(1l);
        imovelMock.setCodigoSituacaoIncorporacao(2l);
        imovelMock.setCodigoTipoImovel(3l);
        imovelMock.setCodigoSituacaoIncorporacao(4l);
        imovelMock.setProprietario("Teste");

        UnidadeAutonoma unidadeAutonoma = new UnidadeAutonoma();
        unidadeAutonoma.setId(2l);
        unidadeAutonoma.setArea(new BigDecimal(80));
        unidadeAutonoma.setIdUnidadeAutonomaCadImovel(5l);

        imovelMock.setUnidadeAutonoma(unidadeAutonoma);

        Imovel imovelMock2 = new Imovel();
        imovelMock2.setId(1l);
        imovelMock2.setRip(RIP);
        imovelMock2.setAreaTerreno(new BigDecimal(20));
        imovelMock2.setCodigoClassificacaoImovel(30l);
        imovelMock2.setCodigoNaturezaImovel(1l);
        imovelMock2.setCodigoSituacaoIncorporacao(2l);

        UnidadeAutonoma unidadeAutonoma2 = new UnidadeAutonoma();
        unidadeAutonoma2.setId(1l);
        unidadeAutonoma2.setArea(new BigDecimal(50));
        unidadeAutonoma2.setIdUnidadeAutonomaCadImovel(10l);

        imovelMock2.setUnidadeAutonoma(unidadeAutonoma2);
        imovelMock2.setCodigoTipoImovel(3l);
        imovelMock2.setCodigoSituacaoIncorporacao(4l);
        imovelMock2.setProprietario("Teste 2");

        Endereco endereco = new Endereco();
        endereco.setId(1l);

        imovelMock.setEndereco(endereco);

        ParcelaDTO parcelaDTO = new ParcelaDTO();
        parcelaDTO.setId(1l);
        parcelaDTO.setRip(RIP);

        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);
        benfeitoria.setAreaConstruida(new BigDecimal(100));

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setSequencial("P0");
        parcela.setAtiva(true);
        parcela.setBenfeitorias(Arrays.asList(benfeitoria));

        imovelMock.setParcelas(Arrays.asList(parcela));

        List<ImovelDTO> lista = new ArrayList<>();
        lista.add(imovelDTO);

        when(imovelRepository.findByRip(RIP)).thenReturn(imovelMock);
        when(imovelRepository.save(any(Imovel.class))).thenReturn(imovelMock2);
        Imovel imovel = imovelService.atualizar(imovelMock2, pendenciasGeradas);

        assertEquals(imovel.getAreaTerreno(), imovelMock.getAreaTerreno());
        assertNotNull(imovel);
    }

    @Test
    @SneakyThrows
    public void extrairImovelParcelaTeste(){
        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setSequencial("P0");
        parcela.setAtiva(true);

        Imovel imovelMock2 = new Imovel();
        imovelMock2.setId(1l);
        imovelMock2.setRip(RIP);

        parcela.setImovel(imovelMock2);

        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        Imovel imovel = imovelService.extrairImovelParcela(parcelas);
        assertNotNull(imovel);
    }


    @Test
    @SneakyThrows
    public void atualizarTestDados() {
        Imovel imovelMock = new Imovel();
        imovelMock.setId(1l);
        imovelMock.setRip(RIP);
        imovelMock.setAreaTerreno(new BigDecimal(10));
        imovelMock.setCodigoClassificacaoImovel(10l);
        imovelMock.setCodigoNaturezaImovel(1l);
        imovelMock.setCodigoSituacaoIncorporacao(2l);
        imovelMock.setCodigoTipoImovel(3l);
        imovelMock.setCodigoSituacaoIncorporacao(4l);
        imovelMock.setProprietario("Teste");

        Imovel imovelMock2 = new Imovel();
        imovelMock2.setId(1l);
        imovelMock2.setRip(RIP);
        imovelMock2.setAreaTerreno(new BigDecimal(20));
        imovelMock2.setCodigoClassificacaoImovel(30l);
        imovelMock2.setCodigoNaturezaImovel(1l);
        imovelMock2.setCodigoSituacaoIncorporacao(2l);

        imovelMock2.setCodigoTipoImovel(3l);
        imovelMock2.setCodigoSituacaoIncorporacao(4l);
        imovelMock2.setProprietario("Teste 2");

        Endereco endereco = new Endereco();
        endereco.setId(1l);

        imovelMock.setEndereco(endereco);

        ParcelaDTO parcelaDTO = new ParcelaDTO();
        parcelaDTO.setId(1l);
        parcelaDTO.setRip(RIP);

        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);
        benfeitoria.setAreaConstruida(new BigDecimal(100));

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setSequencial("P0");
        parcela.setAtiva(true);
        parcela.setBenfeitorias(Arrays.asList(benfeitoria));
        imovelMock2.setParcelas(Arrays.asList(parcela));

        imovelMock.setParcelas(Arrays.asList(parcela));

        List<ImovelDTO> lista = new ArrayList<>();
        lista.add(imovelDTO);

        when(imovelRepository.findByRip(RIP)).thenReturn(imovelMock);
        when(imovelRepository.save(any(Imovel.class))).thenReturn(imovelMock2);
        Imovel imovel = imovelService.atualizar(imovelMock2, pendenciasGeradas);

        assertEquals(imovel.getAreaTerreno(), imovelMock.getAreaTerreno());
        assertNotNull(imovel);
    }


    @Test
    @SneakyThrows
    public void atualizarTestNovaUnidade() {
        Imovel imovelMock = new Imovel();
        imovelMock.setId(1l);
        imovelMock.setRip(RIP);
        imovelMock.setAreaTerreno(new BigDecimal(10));
        imovelMock.setCodigoClassificacaoImovel(10l);
        imovelMock.setCodigoNaturezaImovel(1l);
        imovelMock.setCodigoSituacaoIncorporacao(2l);
        imovelMock.setCodigoTipoImovel(3l);
        imovelMock.setCodigoSituacaoIncorporacao(4l);
        imovelMock.setProprietario("Teste");

        UnidadeAutonoma unidadeAutonoma2 = new UnidadeAutonoma();
        unidadeAutonoma2.setId(1l);
        unidadeAutonoma2.setArea(new BigDecimal(50));
        unidadeAutonoma2.setIdUnidadeAutonomaCadImovel(10l);

        imovelMock.setUnidadeAutonoma(unidadeAutonoma2);


        Imovel imovelMock2 = new Imovel();
        imovelMock2.setId(1l);
        imovelMock2.setRip(RIP);
        imovelMock2.setAreaTerreno(new BigDecimal(20));
        imovelMock2.setCodigoClassificacaoImovel(30l);
        imovelMock2.setCodigoNaturezaImovel(1l);
        imovelMock2.setCodigoSituacaoIncorporacao(2l);


        imovelMock2.setCodigoTipoImovel(3l);
        imovelMock2.setCodigoSituacaoIncorporacao(4l);
        imovelMock2.setProprietario("Teste 2");

        Endereco endereco = new Endereco();
        endereco.setId(1l);

        imovelMock.setEndereco(endereco);

        ParcelaDTO parcelaDTO = new ParcelaDTO();
        parcelaDTO.setId(1l);
        parcelaDTO.setRip(RIP);

        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setId(1l);
        benfeitoria.setAtiva(true);
        benfeitoria.setAreaConstruida(new BigDecimal(100));

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setSequencial("P0");
        parcela.setAtiva(true);
        parcela.setBenfeitorias(Arrays.asList(benfeitoria));

        imovelMock.setParcelas(Arrays.asList(parcela));
        imovelMock2.setParcelas(Arrays.asList(parcela));

        List<ImovelDTO> lista = new ArrayList<>();
        lista.add(imovelDTO);

        when(imovelRepository.findByRip(RIP)).thenReturn(imovelMock2);
        when(imovelRepository.save(any(Imovel.class))).thenReturn(imovelMock2);
        Imovel imovel = imovelService.atualizar(imovelMock, pendenciasGeradas);

        assertEquals(imovel.getAreaTerreno(), imovelMock.getAreaTerreno());
        assertNotNull(imovel);
    }



    @Test(expected = NegocioException.class)
    @SneakyThrows
    public void extrairImovelParcelaTesteThrow(){
        Imovel imovel = imovelService.extrairImovelParcela(new ArrayList<>());
        assertNotNull(imovel);
    }


    @Test
    @SneakyThrows
    public void consultarImovelTest(){
        ImovelDTO imovelMock = new ImovelDTO();
        imovelMock.setId(1l);
        imovelMock.setRip(RIP);
        imovelMock.setCodigoClassificacaoImovel(10l);
        imovelMock.setCodigoNaturezaImovel(1l);
        imovelMock.setCodigoSituacaoIncorporacao(2l);
        imovelMock.setCodigoTipoImovel(3l);
        imovelMock.setCodigoSituacaoIncorporacao(4l);
        imovelMock.setProprietario("Teste");

        ImovelDTO imovelMock2 = new ImovelDTO();
        imovelMock2.setId(1l);
        imovelMock2.setRip(RIP);
        imovelMock2.setCodigoClassificacaoImovel(30l);
        imovelMock2.setCodigoNaturezaImovel(1l);
        imovelMock2.setCodigoSituacaoIncorporacao(2l);

        Imovel imovel= new Imovel();
        imovel.setId(1l);
        imovel.setRip(RIP);
        imovel.setCodigoClassificacaoImovel(30l);
        imovel.setCodigoNaturezaImovel(1l);
        imovel.setCodigoSituacaoIncorporacao(2l);

        DestinacaoImovel destinacaoImovelMock = new DestinacaoImovel();
        destinacaoImovelMock.setId(1l);
        destinacaoImovelMock.setCodigoUtilizacao("0001");
        destinacaoImovelMock.setUltimaDestinacao(true);


        Destinacao destinacaoMock = new Destinacao();
        destinacaoMock.setId(1l);

        destinacaoImovelMock.setDestinacao(destinacaoMock);

        BenfeitoriaDTO benfeitoriaDTO = new BenfeitoriaDTO();
        benfeitoriaDTO.setAtiva(true);
        benfeitoriaDTO.setId(1l);

        Benfeitoria benfeitoria = new Benfeitoria();
        benfeitoria.setAtiva(true);
        benfeitoria.setId(1l);

        Parcela parcela = new Parcela();
        parcela.setId(1l);
        parcela.setUtilizada(true);
        parcela.setSequencial("P0");

        imovel.setParcelas(Arrays.asList(parcela));

        ParcelaDTO parcelaDTO = new ParcelaDTO();
        parcelaDTO.setId(1l);
        parcelaDTO.setUtilizada(true);
        parcelaDTO.setSequencial("P0");
        parcelaDTO.setBenfeitorias(Arrays.asList(benfeitoriaDTO));

        imovelMock.setParcela(parcelaDTO);
        imovelMock2.setParcela(parcelaDTO);

        imovel.setParcelas(Arrays.asList(parcela));
        destinacaoImovelMock.setParcelas(Arrays.asList(parcela));

        imovelMock.setParcelas(Arrays.asList(parcelaDTO));
        imovelMock2.setParcelas(Arrays.asList(parcelaDTO));

        List<Parcela> parcelas = new ArrayList<>();
        parcelas.add(parcela);

        destinacaoImovelMock.setParcelas(parcelas);

        OcupanteDTO ocupanteDTO = new OcupanteDTO();
        ocupanteDTO.setId(1l);

        List<OcupanteDTO> ocupanteDTOs = new ArrayList<>();
        ocupanteDTOs.add(ocupanteDTO);
        when(imovelRepository.buscarDadosPosseInformal(RIP)).thenReturn(imovelMock);
        when(benfeitoriaService.extrairBenfeitorias(imovel.getParcelas())).thenReturn(Arrays.asList(benfeitoria));
        when(entityConverter.converter(any(Imovel.class), eq(ImovelDTO.class))).thenReturn(imovelMock);

        when(destinacaoImovelService.findByIdImovelSequencialParcelaCodigoUtilizacao(anyLong(), anyString(), anyString())).thenReturn(destinacaoImovelMock);
        when(ocupanteService.findByIdPosseInformal(anyLong())).thenReturn(ocupanteDTOs);

        when(imovelRepository.buscarPorRipParcelaAtiva(RIP)).thenReturn(Arrays.asList(imovel));
        ImovelDTO imovelDTO2 = imovelService.consultarImovel(RIP, "", "", "POSSE_INFORMAL");

        assertNotNull(imovelDTO2);

    }

    @Test(expected = NegocioException.class)
    @SneakyThrows
    public void consultarImovelTestThrows(){
        when(imovelRepository.buscarDadosPosseInformal(RIP)).thenReturn(imovelDTO);
        when(destinacaoImovelService.buscarTodasUtilizacoesPorRip(RIP)).thenReturn(Arrays.asList(utilizacaoDTO));
        when(imovelRepository.buscarPorRipParcelaAtiva(RIP)).thenReturn(Arrays.asList(imovel));
        when(entityConverter.converter(any(Imovel.class), eq(ImovelDTO.class))).thenReturn(imovelDTO);
        when(imovelService.getImovelCadastroImoveis(RIP)).thenReturn(imovelDTO);
        when(destinacaoImovelService.findByIdImovelSequencialParcelaCodigoUtilizacao(anyLong(), anyString(), anyString())).thenReturn(null);

        imovelService.consultarImovel(RIP, "", "", "POSSE_INFORMAL");
    }



    @Test(expected = IntegracaoException.class)
    @SneakyThrows
    public void consultarImovelRipValidandoThrowIntegracao() {

        when(imovelService.getImovelRipValido(RIP)).thenReturn(imovelDTO);
        when(validadorRipStrategyFactory.createBean(any(TipoDestinacaoEnum.class))).thenReturn(validadorRip);
        when(entityConverter.converter(any(ImovelDTO.class), eq(Imovel.class))).thenThrow(IntegracaoException.class);
        ImovelDTO imovelDTO = imovelService.consultarImovelRipValidando(consultaImovelDTO);
        assertNotNull(imovelDTO);
    }


    @Test(expected = NegocioException.class)
    @SneakyThrows
    public void buscarListaSuspensoesImovelPorRipThrow() {
        when(requestUtils.doGet(anyString(), eq(List.class))).thenReturn(responseEntity);
        when(responseEntity.getBody()).thenThrow(NegocioException.class);
        imovelService.buscarListaSuspensoesImovelPorRip(consultaImovelDTO);
    }

}